name: Test ELS Testplan Dashboard

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flask-testing

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test application imports
      run: |
        python -c "import app; print('✅ App imports successfully')"
        python -c "from app import app; print('✅ Flask app created successfully')"

    - name: Test application startup
      run: |
        timeout 10s python app.py &
        sleep 5
        curl -f http://localhost:5000 || echo "⚠️ App not responding (expected in test environment)"

    - name: Run basic functionality tests
      run: |
        python -c "
        from app import app
        with app.test_client() as client:
            # Test if app responds
            response = client.get('/')
            print(f'✅ Root endpoint status: {response.status_code}')
            
            # Test API endpoints
            response = client.get('/api/data')
            print(f'✅ API data endpoint status: {response.status_code}')
            
            print('✅ Basic functionality tests passed')
        "

    - name: Check security configurations
      run: |
        python -c "
        from app import app
        config_checks = []
        
        # Check if secret key is set
        if app.config.get('SECRET_KEY'):
            config_checks.append('✅ SECRET_KEY is configured')
        else:
            config_checks.append('⚠️ SECRET_KEY not configured')
            
        # Check upload folder configuration
        if app.config.get('UPLOAD_FOLDER'):
            config_checks.append('✅ UPLOAD_FOLDER is configured')
        else:
            config_checks.append('⚠️ UPLOAD_FOLDER not configured')
            
        for check in config_checks:
            print(check)
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install code quality tools
      run: |
        pip install black isort bandit safety

    - name: Check code formatting with Black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
